{"error":{},"level":"error","message":"uncaughtException: models is not defined\nReferenceError: models is not defined\n    at module.exports (C:\\DEV\\authServer\\backend\\models\\service.js:9:81)\n    at Sequelize.import (C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\sequelize.js:398:32)\n    at fs.readdirSync.filter.forEach.file (C:\\DEV\\authServer\\backend\\models\\index.js:25:40)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:24:6)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)","stack":"ReferenceError: models is not defined\n    at module.exports (C:\\DEV\\authServer\\backend\\models\\service.js:9:81)\n    at Sequelize.import (C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\sequelize.js:398:32)\n    at fs.readdirSync.filter.forEach.file (C:\\DEV\\authServer\\backend\\models\\index.js:25:40)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:24:6)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)","exception":true,"date":"Wed Feb 06 2019 20:11:14 GMT+0900 (GMT+09:00)","process":{"pid":3844,"uid":null,"gid":null,"cwd":"C:\\DEV\\authServer\\backend","execPath":"C:\\Program Files\\nodejs\\node.exe","version":"v11.5.0","argv":["C:\\Program Files\\nodejs\\node.exe","C:\\DEV\\authServer\\backend\\bin\\www"],"memoryUsage":{"rss":51621888,"heapTotal":39514112,"heapUsed":23192000,"external":137866}},"os":{"loadavg":[0,0,0],"uptime":117597},"trace":[{"column":81,"file":"C:\\DEV\\authServer\\backend\\models\\service.js","function":"module.exports","line":9,"method":"exports","native":false},{"column":32,"file":"C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\sequelize.js","function":"Sequelize.import","line":398,"method":"import","native":false},{"column":40,"file":"C:\\DEV\\authServer\\backend\\models\\index.js","function":"fs.readdirSync.filter.forEach.file","line":25,"method":"file","native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":6,"file":"C:\\DEV\\authServer\\backend\\models\\index.js","function":null,"line":24,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":11,"file":"C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js","function":"require","line":14,"method":null,"native":false},{"column":16,"file":"C:\\DEV\\authServer\\backend\\routes\\users\\index.js","function":null,"line":6,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":21,"file":"C:\\DEV\\authServer\\backend\\app.js","function":null,"line":13,"method":null,"native":false}]}
{"error":{},"level":"error","message":"uncaughtException: models is not defined\nReferenceError: models is not defined\n    at module.exports (C:\\DEV\\authServer\\backend\\models\\service.js:9:81)\n    at Sequelize.import (C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\sequelize.js:398:32)\n    at fs.readdirSync.filter.forEach.file (C:\\DEV\\authServer\\backend\\models\\index.js:25:40)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:24:6)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)","stack":"ReferenceError: models is not defined\n    at module.exports (C:\\DEV\\authServer\\backend\\models\\service.js:9:81)\n    at Sequelize.import (C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\sequelize.js:398:32)\n    at fs.readdirSync.filter.forEach.file (C:\\DEV\\authServer\\backend\\models\\index.js:25:40)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:24:6)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)","exception":true,"date":"Wed Feb 06 2019 20:12:04 GMT+0900 (GMT+09:00)","process":{"pid":7204,"uid":null,"gid":null,"cwd":"C:\\DEV\\authServer\\backend","execPath":"C:\\Program Files\\nodejs\\node.exe","version":"v11.5.0","argv":["C:\\Program Files\\nodejs\\node.exe","C:\\DEV\\authServer\\backend\\bin\\www"],"memoryUsage":{"rss":51851264,"heapTotal":38989824,"heapUsed":23312280,"external":174134}},"os":{"loadavg":[0,0,0],"uptime":117646},"trace":[{"column":81,"file":"C:\\DEV\\authServer\\backend\\models\\service.js","function":"module.exports","line":9,"method":"exports","native":false},{"column":32,"file":"C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\sequelize.js","function":"Sequelize.import","line":398,"method":"import","native":false},{"column":40,"file":"C:\\DEV\\authServer\\backend\\models\\index.js","function":"fs.readdirSync.filter.forEach.file","line":25,"method":"file","native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":6,"file":"C:\\DEV\\authServer\\backend\\models\\index.js","function":null,"line":24,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":11,"file":"C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js","function":"require","line":14,"method":null,"native":false},{"column":16,"file":"C:\\DEV\\authServer\\backend\\routes\\users\\index.js","function":null,"line":6,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":21,"file":"C:\\DEV\\authServer\\backend\\app.js","function":null,"line":13,"method":null,"native":false}]}
{"error":{},"level":"error","message":"uncaughtException: Cannot read property 'hasMany' of undefined\nTypeError: Cannot read property 'hasMany' of undefined\n    at Function.User.associate (C:\\DEV\\authServer\\backend\\models\\user.js:21:17)\n    at Object.keys.forEach.modelName (C:\\DEV\\authServer\\backend\\models\\index.js:32:23)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:29:17)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)","stack":"TypeError: Cannot read property 'hasMany' of undefined\n    at Function.User.associate (C:\\DEV\\authServer\\backend\\models\\user.js:21:17)\n    at Object.keys.forEach.modelName (C:\\DEV\\authServer\\backend\\models\\index.js:32:23)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:29:17)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)","exception":true,"date":"Wed Feb 06 2019 20:13:28 GMT+0900 (GMT+09:00)","process":{"pid":9240,"uid":null,"gid":null,"cwd":"C:\\DEV\\authServer\\backend","execPath":"C:\\Program Files\\nodejs\\node.exe","version":"v11.5.0","argv":["C:\\Program Files\\nodejs\\node.exe","C:\\DEV\\authServer\\backend\\bin\\www"],"memoryUsage":{"rss":52068352,"heapTotal":40038400,"heapUsed":23563792,"external":90993}},"os":{"loadavg":[0,0,0],"uptime":117730},"trace":[{"column":17,"file":"C:\\DEV\\authServer\\backend\\models\\user.js","function":"Function.User.associate","line":21,"method":"associate","native":false},{"column":23,"file":"C:\\DEV\\authServer\\backend\\models\\index.js","function":"Object.keys.forEach.modelName","line":32,"method":"modelName","native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":17,"file":"C:\\DEV\\authServer\\backend\\models\\index.js","function":null,"line":29,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":11,"file":"C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js","function":"require","line":14,"method":null,"native":false},{"column":16,"file":"C:\\DEV\\authServer\\backend\\routes\\users\\index.js","function":null,"line":6,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":21,"file":"C:\\DEV\\authServer\\backend\\app.js","function":null,"line":13,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false}]}
{"error":{},"level":"error","message":"uncaughtException: service.class BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf(\n        [\n          Utils.underscoredIf(this.as, this.source.options.underscored),\n          this.target.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + singular,\n      set: 'set' + singular,\n      create: 'create' + singular\n    };\n  }\n\n  // the id is in the source table\n  injectAttributes() {\n    const newAttributes = {};\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n      allowNull: true\n    });\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    this.source.refreshAttributes();\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Object} [options]\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findOne} for a full explanation of options\n   * @return {Promise<Model>}\n   */\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Target = association.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[association.targetKey] = {\n        [Op.in]: instances.map(instance => instance.get(association.foreignKey))\n      };\n    } else {\n      if (association.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(association.foreignKey), options);\n      } else {\n        where[association.targetKey] = instance.get(association.foreignKey);\n        options.limit = null;\n      }\n    }\n\n    options.where = options.where ?\n      {[Op.and]: [where, options.where]} :\n      where;\n\n    if (instances) {\n      return Target.findAll(options).then(results => {\n        const result = {};\n        for (const instance of instances) {\n          result[instance.get(association.foreignKey, {raw: true})] = null;\n        }\n\n        for (const instance of results) {\n          result[instance.get(association.targetKey, {raw: true})] = instance;\n        }\n\n        return result;\n      });\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model|String|Number} [newAssociation] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {Object} [options] Options passed to `this.save`\n   * @param {Boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   * @return {Promise}\n   */\n  set(sourceInstance, associatedInstance, options) {\n    const association = this;\n\n    options = options || {};\n\n    let value = associatedInstance;\n    if (associatedInstance instanceof association.target) {\n      value = associatedInstance[association.targetKey];\n    }\n\n    sourceInstance.set(association.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = _.extend({\n      fields: [association.foreignKey],\n      allowNull: [association.foreignKey],\n      association: true\n    }, options);\n\n    // passes the changed field to save, so only that field get updated.\n    return sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create` and setAssociation.\n   * @see {@link Model#create}  for a full explanation of options\n   * @return {Promise}\n   */\n  create(sourceInstance, values, fieldsOrOptions) {\n    const association = this;\n\n    const options = {};\n\n    if ((fieldsOrOptions || {}).transaction instanceof Transaction) {\n      options.transaction = fieldsOrOptions.transaction;\n    }\n    options.logging = (fieldsOrOptions || {}).logging;\n\n    return association.target.create(values, fieldsOrOptions).then(newAssociatedObject =>\n      sourceInstance[association.accessors.set](newAssociatedObject, options)\n    );\n  }\n} called with something that's not a subclass of Sequelize.Model\nError: service.class BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf(\n        [\n          Utils.underscoredIf(this.as, this.source.options.underscored),\n          this.target.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + singular,\n      set: 'set' + singular,\n      create: 'create' + singular\n    };\n  }\n\n  // the id is in the source table\n  injectAttributes() {\n    const newAttributes = {};\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n      allowNull: true\n    });\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    this.source.refreshAttributes();\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Object} [options]\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findOne} for a full explanation of options\n   * @return {Promise<Model>}\n   */\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Target = association.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[association.targetKey] = {\n        [Op.in]: instances.map(instance => instance.get(association.foreignKey))\n      };\n    } else {\n      if (association.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(association.foreignKey), options);\n      } else {\n        where[association.targetKey] = instance.get(association.foreignKey);\n        options.limit = null;\n      }\n    }\n\n    options.where = options.where ?\n      {[Op.and]: [where, options.where]} :\n      where;\n\n    if (instances) {\n      return Target.findAll(options).then(results => {\n        const result = {};\n        for (const instance of instances) {\n          result[instance.get(association.foreignKey, {raw: true})] = null;\n        }\n\n        for (const instance of results) {\n          result[instance.get(association.targetKey, {raw: true})] = instance;\n        }\n\n        return result;\n      });\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model|String|Number} [newAssociation] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {Object} [options] Options passed to `this.save`\n   * @param {Boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   * @return {Promise}\n   */\n  set(sourceInstance, associatedInstance, options) {\n    const association = this;\n\n    options = options || {};\n\n    let value = associatedInstance;\n    if (associatedInstance instanceof association.target) {\n      value = associatedInstance[association.targetKey];\n    }\n\n    sourceInstance.set(association.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = _.extend({\n      fields: [association.foreignKey],\n      allowNull: [association.foreignKey],\n      association: true\n    }, options);\n\n    // passes the changed field to save, so only that field get updated.\n    return sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create` and setAssociation.\n   * @see {@link Model#create}  for a full explanation of options\n   * @return {Promise}\n   */\n  create(sourceInstance, values, fieldsOrOptions) {\n    const association = this;\n\n    const options = {};\n\n    if ((fieldsOrOptions || {}).transaction instanceof Transaction) {\n      options.transaction = fieldsOrOptions.transaction;\n    }\n    options.logging = (fieldsOrOptions || {}).logging;\n\n    return association.target.create(values, fieldsOrOptions).then(newAssociatedObject =>\n      sourceInstance[association.accessors.set](newAssociatedObject, options)\n    );\n  }\n} called with something that's not a subclass of Sequelize.Model\n    at Function.<anonymous> (C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\associations\\mixin.js:81:13)\n    at Function.Service.associate (C:\\DEV\\authServer\\backend\\models\\service.js:28:24)\n    at Object.keys.forEach.modelName (C:\\DEV\\authServer\\backend\\models\\index.js:32:23)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:29:17)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)","stack":"Error: service.class BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf(\n        [\n          Utils.underscoredIf(this.as, this.source.options.underscored),\n          this.target.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + singular,\n      set: 'set' + singular,\n      create: 'create' + singular\n    };\n  }\n\n  // the id is in the source table\n  injectAttributes() {\n    const newAttributes = {};\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n      allowNull: true\n    });\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    this.source.refreshAttributes();\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Object} [options]\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findOne} for a full explanation of options\n   * @return {Promise<Model>}\n   */\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Target = association.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[association.targetKey] = {\n        [Op.in]: instances.map(instance => instance.get(association.foreignKey))\n      };\n    } else {\n      if (association.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(association.foreignKey), options);\n      } else {\n        where[association.targetKey] = instance.get(association.foreignKey);\n        options.limit = null;\n      }\n    }\n\n    options.where = options.where ?\n      {[Op.and]: [where, options.where]} :\n      where;\n\n    if (instances) {\n      return Target.findAll(options).then(results => {\n        const result = {};\n        for (const instance of instances) {\n          result[instance.get(association.foreignKey, {raw: true})] = null;\n        }\n\n        for (const instance of results) {\n          result[instance.get(association.targetKey, {raw: true})] = instance;\n        }\n\n        return result;\n      });\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model|String|Number} [newAssociation] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {Object} [options] Options passed to `this.save`\n   * @param {Boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   * @return {Promise}\n   */\n  set(sourceInstance, associatedInstance, options) {\n    const association = this;\n\n    options = options || {};\n\n    let value = associatedInstance;\n    if (associatedInstance instanceof association.target) {\n      value = associatedInstance[association.targetKey];\n    }\n\n    sourceInstance.set(association.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = _.extend({\n      fields: [association.foreignKey],\n      allowNull: [association.foreignKey],\n      association: true\n    }, options);\n\n    // passes the changed field to save, so only that field get updated.\n    return sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create` and setAssociation.\n   * @see {@link Model#create}  for a full explanation of options\n   * @return {Promise}\n   */\n  create(sourceInstance, values, fieldsOrOptions) {\n    const association = this;\n\n    const options = {};\n\n    if ((fieldsOrOptions || {}).transaction instanceof Transaction) {\n      options.transaction = fieldsOrOptions.transaction;\n    }\n    options.logging = (fieldsOrOptions || {}).logging;\n\n    return association.target.create(values, fieldsOrOptions).then(newAssociatedObject =>\n      sourceInstance[association.accessors.set](newAssociatedObject, options)\n    );\n  }\n} called with something that's not a subclass of Sequelize.Model\n    at Function.<anonymous> (C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\associations\\mixin.js:81:13)\n    at Function.Service.associate (C:\\DEV\\authServer\\backend\\models\\service.js:28:24)\n    at Object.keys.forEach.modelName (C:\\DEV\\authServer\\backend\\models\\index.js:32:23)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:29:17)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)","exception":true,"date":"Wed Feb 06 2019 20:25:11 GMT+0900 (GMT+09:00)","process":{"pid":5836,"uid":null,"gid":null,"cwd":"C:\\DEV\\authServer\\backend","execPath":"C:\\Program Files\\nodejs\\node.exe","version":"v11.5.0","argv":["C:\\Program Files\\nodejs\\node.exe","C:\\DEV\\authServer\\backend\\bin\\www"],"memoryUsage":{"rss":52736000,"heapTotal":39514112,"heapUsed":23912368,"external":174134}},"os":{"loadavg":[0,0,0],"uptime":118434},"trace":[{"column":null,"file":null,"function":null,"line":null,"method":null,"native":false},{"column":13,"file":"C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\associations\\mixin.js","function":null,"line":81,"method":null,"native":false},{"column":24,"file":"C:\\DEV\\authServer\\backend\\models\\service.js","function":"Function.Service.associate","line":28,"method":"associate","native":false},{"column":23,"file":"C:\\DEV\\authServer\\backend\\models\\index.js","function":"Object.keys.forEach.modelName","line":32,"method":"modelName","native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":17,"file":"C:\\DEV\\authServer\\backend\\models\\index.js","function":null,"line":29,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":11,"file":"C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js","function":"require","line":14,"method":null,"native":false},{"column":16,"file":"C:\\DEV\\authServer\\backend\\routes\\users\\index.js","function":null,"line":6,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":21,"file":"C:\\DEV\\authServer\\backend\\app.js","function":null,"line":13,"method":null,"native":false}]}
{"error":{},"level":"error","message":"uncaughtException: service.class BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf(\n        [\n          Utils.underscoredIf(this.as, this.source.options.underscored),\n          this.target.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + singular,\n      set: 'set' + singular,\n      create: 'create' + singular\n    };\n  }\n\n  // the id is in the source table\n  injectAttributes() {\n    const newAttributes = {};\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n      allowNull: true\n    });\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    this.source.refreshAttributes();\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Object} [options]\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findOne} for a full explanation of options\n   * @return {Promise<Model>}\n   */\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Target = association.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[association.targetKey] = {\n        [Op.in]: instances.map(instance => instance.get(association.foreignKey))\n      };\n    } else {\n      if (association.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(association.foreignKey), options);\n      } else {\n        where[association.targetKey] = instance.get(association.foreignKey);\n        options.limit = null;\n      }\n    }\n\n    options.where = options.where ?\n      {[Op.and]: [where, options.where]} :\n      where;\n\n    if (instances) {\n      return Target.findAll(options).then(results => {\n        const result = {};\n        for (const instance of instances) {\n          result[instance.get(association.foreignKey, {raw: true})] = null;\n        }\n\n        for (const instance of results) {\n          result[instance.get(association.targetKey, {raw: true})] = instance;\n        }\n\n        return result;\n      });\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model|String|Number} [newAssociation] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {Object} [options] Options passed to `this.save`\n   * @param {Boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   * @return {Promise}\n   */\n  set(sourceInstance, associatedInstance, options) {\n    const association = this;\n\n    options = options || {};\n\n    let value = associatedInstance;\n    if (associatedInstance instanceof association.target) {\n      value = associatedInstance[association.targetKey];\n    }\n\n    sourceInstance.set(association.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = _.extend({\n      fields: [association.foreignKey],\n      allowNull: [association.foreignKey],\n      association: true\n    }, options);\n\n    // passes the changed field to save, so only that field get updated.\n    return sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create` and setAssociation.\n   * @see {@link Model#create}  for a full explanation of options\n   * @return {Promise}\n   */\n  create(sourceInstance, values, fieldsOrOptions) {\n    const association = this;\n\n    const options = {};\n\n    if ((fieldsOrOptions || {}).transaction instanceof Transaction) {\n      options.transaction = fieldsOrOptions.transaction;\n    }\n    options.logging = (fieldsOrOptions || {}).logging;\n\n    return association.target.create(values, fieldsOrOptions).then(newAssociatedObject =>\n      sourceInstance[association.accessors.set](newAssociatedObject, options)\n    );\n  }\n} called with something that's not a subclass of Sequelize.Model\nError: service.class BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf(\n        [\n          Utils.underscoredIf(this.as, this.source.options.underscored),\n          this.target.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + singular,\n      set: 'set' + singular,\n      create: 'create' + singular\n    };\n  }\n\n  // the id is in the source table\n  injectAttributes() {\n    const newAttributes = {};\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n      allowNull: true\n    });\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    this.source.refreshAttributes();\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Object} [options]\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findOne} for a full explanation of options\n   * @return {Promise<Model>}\n   */\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Target = association.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[association.targetKey] = {\n        [Op.in]: instances.map(instance => instance.get(association.foreignKey))\n      };\n    } else {\n      if (association.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(association.foreignKey), options);\n      } else {\n        where[association.targetKey] = instance.get(association.foreignKey);\n        options.limit = null;\n      }\n    }\n\n    options.where = options.where ?\n      {[Op.and]: [where, options.where]} :\n      where;\n\n    if (instances) {\n      return Target.findAll(options).then(results => {\n        const result = {};\n        for (const instance of instances) {\n          result[instance.get(association.foreignKey, {raw: true})] = null;\n        }\n\n        for (const instance of results) {\n          result[instance.get(association.targetKey, {raw: true})] = instance;\n        }\n\n        return result;\n      });\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model|String|Number} [newAssociation] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {Object} [options] Options passed to `this.save`\n   * @param {Boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   * @return {Promise}\n   */\n  set(sourceInstance, associatedInstance, options) {\n    const association = this;\n\n    options = options || {};\n\n    let value = associatedInstance;\n    if (associatedInstance instanceof association.target) {\n      value = associatedInstance[association.targetKey];\n    }\n\n    sourceInstance.set(association.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = _.extend({\n      fields: [association.foreignKey],\n      allowNull: [association.foreignKey],\n      association: true\n    }, options);\n\n    // passes the changed field to save, so only that field get updated.\n    return sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create` and setAssociation.\n   * @see {@link Model#create}  for a full explanation of options\n   * @return {Promise}\n   */\n  create(sourceInstance, values, fieldsOrOptions) {\n    const association = this;\n\n    const options = {};\n\n    if ((fieldsOrOptions || {}).transaction instanceof Transaction) {\n      options.transaction = fieldsOrOptions.transaction;\n    }\n    options.logging = (fieldsOrOptions || {}).logging;\n\n    return association.target.create(values, fieldsOrOptions).then(newAssociatedObject =>\n      sourceInstance[association.accessors.set](newAssociatedObject, options)\n    );\n  }\n} called with something that's not a subclass of Sequelize.Model\n    at Function.<anonymous> (C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\associations\\mixin.js:81:13)\n    at Function.Service.associate (C:\\DEV\\authServer\\backend\\models\\service.js:28:24)\n    at Object.keys.forEach.modelName (C:\\DEV\\authServer\\backend\\models\\index.js:32:23)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:29:17)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)","stack":"Error: service.class BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf(\n        [\n          Utils.underscoredIf(this.as, this.source.options.underscored),\n          this.target.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + singular,\n      set: 'set' + singular,\n      create: 'create' + singular\n    };\n  }\n\n  // the id is in the source table\n  injectAttributes() {\n    const newAttributes = {};\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n      allowNull: true\n    });\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    this.source.refreshAttributes();\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Object} [options]\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findOne} for a full explanation of options\n   * @return {Promise<Model>}\n   */\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Target = association.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[association.targetKey] = {\n        [Op.in]: instances.map(instance => instance.get(association.foreignKey))\n      };\n    } else {\n      if (association.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(association.foreignKey), options);\n      } else {\n        where[association.targetKey] = instance.get(association.foreignKey);\n        options.limit = null;\n      }\n    }\n\n    options.where = options.where ?\n      {[Op.and]: [where, options.where]} :\n      where;\n\n    if (instances) {\n      return Target.findAll(options).then(results => {\n        const result = {};\n        for (const instance of instances) {\n          result[instance.get(association.foreignKey, {raw: true})] = null;\n        }\n\n        for (const instance of results) {\n          result[instance.get(association.targetKey, {raw: true})] = instance;\n        }\n\n        return result;\n      });\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model|String|Number} [newAssociation] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {Object} [options] Options passed to `this.save`\n   * @param {Boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   * @return {Promise}\n   */\n  set(sourceInstance, associatedInstance, options) {\n    const association = this;\n\n    options = options || {};\n\n    let value = associatedInstance;\n    if (associatedInstance instanceof association.target) {\n      value = associatedInstance[association.targetKey];\n    }\n\n    sourceInstance.set(association.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = _.extend({\n      fields: [association.foreignKey],\n      allowNull: [association.foreignKey],\n      association: true\n    }, options);\n\n    // passes the changed field to save, so only that field get updated.\n    return sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create` and setAssociation.\n   * @see {@link Model#create}  for a full explanation of options\n   * @return {Promise}\n   */\n  create(sourceInstance, values, fieldsOrOptions) {\n    const association = this;\n\n    const options = {};\n\n    if ((fieldsOrOptions || {}).transaction instanceof Transaction) {\n      options.transaction = fieldsOrOptions.transaction;\n    }\n    options.logging = (fieldsOrOptions || {}).logging;\n\n    return association.target.create(values, fieldsOrOptions).then(newAssociatedObject =>\n      sourceInstance[association.accessors.set](newAssociatedObject, options)\n    );\n  }\n} called with something that's not a subclass of Sequelize.Model\n    at Function.<anonymous> (C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\associations\\mixin.js:81:13)\n    at Function.Service.associate (C:\\DEV\\authServer\\backend\\models\\service.js:28:24)\n    at Object.keys.forEach.modelName (C:\\DEV\\authServer\\backend\\models\\index.js:32:23)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:29:17)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)","exception":true,"date":"Wed Feb 06 2019 20:25:37 GMT+0900 (GMT+09:00)","process":{"pid":9436,"uid":null,"gid":null,"cwd":"C:\\DEV\\authServer\\backend","execPath":"C:\\Program Files\\nodejs\\node.exe","version":"v11.5.0","argv":["C:\\Program Files\\nodejs\\node.exe","C:\\DEV\\authServer\\backend\\bin\\www"],"memoryUsage":{"rss":52584448,"heapTotal":40562688,"heapUsed":23815368,"external":137866}},"os":{"loadavg":[0,0,0],"uptime":118459},"trace":[{"column":null,"file":null,"function":null,"line":null,"method":null,"native":false},{"column":13,"file":"C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\associations\\mixin.js","function":null,"line":81,"method":null,"native":false},{"column":24,"file":"C:\\DEV\\authServer\\backend\\models\\service.js","function":"Function.Service.associate","line":28,"method":"associate","native":false},{"column":23,"file":"C:\\DEV\\authServer\\backend\\models\\index.js","function":"Object.keys.forEach.modelName","line":32,"method":"modelName","native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":17,"file":"C:\\DEV\\authServer\\backend\\models\\index.js","function":null,"line":29,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":11,"file":"C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js","function":"require","line":14,"method":null,"native":false},{"column":16,"file":"C:\\DEV\\authServer\\backend\\routes\\users\\index.js","function":null,"line":6,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":21,"file":"C:\\DEV\\authServer\\backend\\app.js","function":null,"line":13,"method":null,"native":false}]}
{"error":{},"level":"error","message":"uncaughtException: service.class BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf(\n        [\n          Utils.underscoredIf(this.as, this.source.options.underscored),\n          this.target.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + singular,\n      set: 'set' + singular,\n      create: 'create' + singular\n    };\n  }\n\n  // the id is in the source table\n  injectAttributes() {\n    const newAttributes = {};\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n      allowNull: true\n    });\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    this.source.refreshAttributes();\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Object} [options]\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findOne} for a full explanation of options\n   * @return {Promise<Model>}\n   */\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Target = association.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[association.targetKey] = {\n        [Op.in]: instances.map(instance => instance.get(association.foreignKey))\n      };\n    } else {\n      if (association.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(association.foreignKey), options);\n      } else {\n        where[association.targetKey] = instance.get(association.foreignKey);\n        options.limit = null;\n      }\n    }\n\n    options.where = options.where ?\n      {[Op.and]: [where, options.where]} :\n      where;\n\n    if (instances) {\n      return Target.findAll(options).then(results => {\n        const result = {};\n        for (const instance of instances) {\n          result[instance.get(association.foreignKey, {raw: true})] = null;\n        }\n\n        for (const instance of results) {\n          result[instance.get(association.targetKey, {raw: true})] = instance;\n        }\n\n        return result;\n      });\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model|String|Number} [newAssociation] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {Object} [options] Options passed to `this.save`\n   * @param {Boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   * @return {Promise}\n   */\n  set(sourceInstance, associatedInstance, options) {\n    const association = this;\n\n    options = options || {};\n\n    let value = associatedInstance;\n    if (associatedInstance instanceof association.target) {\n      value = associatedInstance[association.targetKey];\n    }\n\n    sourceInstance.set(association.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = _.extend({\n      fields: [association.foreignKey],\n      allowNull: [association.foreignKey],\n      association: true\n    }, options);\n\n    // passes the changed field to save, so only that field get updated.\n    return sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create` and setAssociation.\n   * @see {@link Model#create}  for a full explanation of options\n   * @return {Promise}\n   */\n  create(sourceInstance, values, fieldsOrOptions) {\n    const association = this;\n\n    const options = {};\n\n    if ((fieldsOrOptions || {}).transaction instanceof Transaction) {\n      options.transaction = fieldsOrOptions.transaction;\n    }\n    options.logging = (fieldsOrOptions || {}).logging;\n\n    return association.target.create(values, fieldsOrOptions).then(newAssociatedObject =>\n      sourceInstance[association.accessors.set](newAssociatedObject, options)\n    );\n  }\n} called with something that's not a subclass of Sequelize.Model\nError: service.class BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf(\n        [\n          Utils.underscoredIf(this.as, this.source.options.underscored),\n          this.target.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + singular,\n      set: 'set' + singular,\n      create: 'create' + singular\n    };\n  }\n\n  // the id is in the source table\n  injectAttributes() {\n    const newAttributes = {};\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n      allowNull: true\n    });\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    this.source.refreshAttributes();\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Object} [options]\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findOne} for a full explanation of options\n   * @return {Promise<Model>}\n   */\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Target = association.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[association.targetKey] = {\n        [Op.in]: instances.map(instance => instance.get(association.foreignKey))\n      };\n    } else {\n      if (association.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(association.foreignKey), options);\n      } else {\n        where[association.targetKey] = instance.get(association.foreignKey);\n        options.limit = null;\n      }\n    }\n\n    options.where = options.where ?\n      {[Op.and]: [where, options.where]} :\n      where;\n\n    if (instances) {\n      return Target.findAll(options).then(results => {\n        const result = {};\n        for (const instance of instances) {\n          result[instance.get(association.foreignKey, {raw: true})] = null;\n        }\n\n        for (const instance of results) {\n          result[instance.get(association.targetKey, {raw: true})] = instance;\n        }\n\n        return result;\n      });\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model|String|Number} [newAssociation] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {Object} [options] Options passed to `this.save`\n   * @param {Boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   * @return {Promise}\n   */\n  set(sourceInstance, associatedInstance, options) {\n    const association = this;\n\n    options = options || {};\n\n    let value = associatedInstance;\n    if (associatedInstance instanceof association.target) {\n      value = associatedInstance[association.targetKey];\n    }\n\n    sourceInstance.set(association.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = _.extend({\n      fields: [association.foreignKey],\n      allowNull: [association.foreignKey],\n      association: true\n    }, options);\n\n    // passes the changed field to save, so only that field get updated.\n    return sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create` and setAssociation.\n   * @see {@link Model#create}  for a full explanation of options\n   * @return {Promise}\n   */\n  create(sourceInstance, values, fieldsOrOptions) {\n    const association = this;\n\n    const options = {};\n\n    if ((fieldsOrOptions || {}).transaction instanceof Transaction) {\n      options.transaction = fieldsOrOptions.transaction;\n    }\n    options.logging = (fieldsOrOptions || {}).logging;\n\n    return association.target.create(values, fieldsOrOptions).then(newAssociatedObject =>\n      sourceInstance[association.accessors.set](newAssociatedObject, options)\n    );\n  }\n} called with something that's not a subclass of Sequelize.Model\n    at Function.<anonymous> (C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\associations\\mixin.js:81:13)\n    at Function.Service.associate (C:\\DEV\\authServer\\backend\\models\\service.js:28:24)\n    at Object.keys.forEach.modelName (C:\\DEV\\authServer\\backend\\models\\index.js:32:23)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:29:17)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)","stack":"Error: service.class BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf(\n        [\n          Utils.underscoredIf(this.as, this.source.options.underscored),\n          this.target.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + singular,\n      set: 'set' + singular,\n      create: 'create' + singular\n    };\n  }\n\n  // the id is in the source table\n  injectAttributes() {\n    const newAttributes = {};\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n      allowNull: true\n    });\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    this.source.refreshAttributes();\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Object} [options]\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findOne} for a full explanation of options\n   * @return {Promise<Model>}\n   */\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Target = association.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[association.targetKey] = {\n        [Op.in]: instances.map(instance => instance.get(association.foreignKey))\n      };\n    } else {\n      if (association.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(association.foreignKey), options);\n      } else {\n        where[association.targetKey] = instance.get(association.foreignKey);\n        options.limit = null;\n      }\n    }\n\n    options.where = options.where ?\n      {[Op.and]: [where, options.where]} :\n      where;\n\n    if (instances) {\n      return Target.findAll(options).then(results => {\n        const result = {};\n        for (const instance of instances) {\n          result[instance.get(association.foreignKey, {raw: true})] = null;\n        }\n\n        for (const instance of results) {\n          result[instance.get(association.targetKey, {raw: true})] = instance;\n        }\n\n        return result;\n      });\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model|String|Number} [newAssociation] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {Object} [options] Options passed to `this.save`\n   * @param {Boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   * @return {Promise}\n   */\n  set(sourceInstance, associatedInstance, options) {\n    const association = this;\n\n    options = options || {};\n\n    let value = associatedInstance;\n    if (associatedInstance instanceof association.target) {\n      value = associatedInstance[association.targetKey];\n    }\n\n    sourceInstance.set(association.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = _.extend({\n      fields: [association.foreignKey],\n      allowNull: [association.foreignKey],\n      association: true\n    }, options);\n\n    // passes the changed field to save, so only that field get updated.\n    return sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create` and setAssociation.\n   * @see {@link Model#create}  for a full explanation of options\n   * @return {Promise}\n   */\n  create(sourceInstance, values, fieldsOrOptions) {\n    const association = this;\n\n    const options = {};\n\n    if ((fieldsOrOptions || {}).transaction instanceof Transaction) {\n      options.transaction = fieldsOrOptions.transaction;\n    }\n    options.logging = (fieldsOrOptions || {}).logging;\n\n    return association.target.create(values, fieldsOrOptions).then(newAssociatedObject =>\n      sourceInstance[association.accessors.set](newAssociatedObject, options)\n    );\n  }\n} called with something that's not a subclass of Sequelize.Model\n    at Function.<anonymous> (C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\associations\\mixin.js:81:13)\n    at Function.Service.associate (C:\\DEV\\authServer\\backend\\models\\service.js:28:24)\n    at Object.keys.forEach.modelName (C:\\DEV\\authServer\\backend\\models\\index.js:32:23)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:29:17)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)","exception":true,"date":"Wed Feb 06 2019 20:26:00 GMT+0900 (GMT+09:00)","process":{"pid":7372,"uid":null,"gid":null,"cwd":"C:\\DEV\\authServer\\backend","execPath":"C:\\Program Files\\nodejs\\node.exe","version":"v11.5.0","argv":["C:\\Program Files\\nodejs\\node.exe","C:\\DEV\\authServer\\backend\\bin\\www"],"memoryUsage":{"rss":52248576,"heapTotal":40038400,"heapUsed":23857512,"external":174134}},"os":{"loadavg":[0,0,0],"uptime":118482},"trace":[{"column":null,"file":null,"function":null,"line":null,"method":null,"native":false},{"column":13,"file":"C:\\DEV\\authServer\\backend\\node_modules\\sequelize\\lib\\associations\\mixin.js","function":null,"line":81,"method":null,"native":false},{"column":24,"file":"C:\\DEV\\authServer\\backend\\models\\service.js","function":"Function.Service.associate","line":28,"method":"associate","native":false},{"column":23,"file":"C:\\DEV\\authServer\\backend\\models\\index.js","function":"Object.keys.forEach.modelName","line":32,"method":"modelName","native":false},{"column":null,"file":null,"function":"Array.forEach","line":null,"method":"forEach","native":false},{"column":17,"file":"C:\\DEV\\authServer\\backend\\models\\index.js","function":null,"line":29,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":11,"file":"C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js","function":"require","line":14,"method":null,"native":false},{"column":16,"file":"C:\\DEV\\authServer\\backend\\routes\\users\\index.js","function":null,"line":6,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":21,"file":"C:\\DEV\\authServer\\backend\\app.js","function":null,"line":13,"method":null,"native":false}]}
{"message":"404 - Not Found - /user - GET - ::1","level":"error"}
{"message":"::1 - - [06/Feb/2019:12:31:33 +0000] \"GET /user HTTP/1.1\" 404 2066 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n","level":"info"}
{"message":"::1 - - [06/Feb/2019:12:31:33 +0000] \"GET /stylesheets/style.css HTTP/1.1\" 304 - \"http://localhost:3000/user\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n","level":"info"}
{"message":"404 - Not Found - /favicon.ico - GET - ::1","level":"error"}
{"message":"::1 - - [06/Feb/2019:12:31:33 +0000] \"GET /favicon.ico HTTP/1.1\" 404 1992 \"http://localhost:3000/user\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n","level":"info"}
{"level":"info"}
{"message":"500 - Cannot read property 'findAll' of undefined - /users - GET - ::1","level":"error"}
{"message":"::1 - - [06/Feb/2019:12:31:37 +0000] \"GET /users HTTP/1.1\" 500 2314 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n","level":"info"}
{"message":"::1 - - [06/Feb/2019:12:31:37 +0000] \"GET /stylesheets/style.css HTTP/1.1\" 304 - \"http://localhost:3000/users\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n","level":"info"}
{"message":"::ffff:127.0.0.1 - - [06/Feb/2019:12:33:12 +0000] \"GET /users HTTP/1.1\" - - \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n","level":"info"}
{"message":"::1 - - [06/Feb/2019:12:35:06 +0000] \"GET /users HTTP/1.1\" - - \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n","level":"info"}
{"error":{},"level":"error","message":"uncaughtException: Cannot read property 'sync' of undefined\nTypeError: Cannot read property 'sync' of undefined\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:38:14)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)","stack":"TypeError: Cannot read property 'sync' of undefined\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\models\\index.js:38:14)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at require (C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js:14:11)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\routes\\users\\index.js:6:16)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:552:3)\n    at Module.require (internal/modules/cjs/loader.js:657:17)\n    at require (internal/modules/cjs/helpers.js:22:18)\n    at Object.<anonymous> (C:\\DEV\\authServer\\backend\\app.js:13:21)\n    at Module._compile (internal/modules/cjs/loader.js:721:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:732:10)\n    at Module.load (internal/modules/cjs/loader.js:620:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:560:12)","exception":true,"date":"Wed Feb 06 2019 21:36:35 GMT+0900 (GMT+09:00)","process":{"pid":4524,"uid":null,"gid":null,"cwd":"C:\\DEV\\authServer\\backend","execPath":"C:\\Program Files\\nodejs\\node.exe","version":"v11.5.0","argv":["C:\\Program Files\\nodejs\\node.exe","C:\\DEV\\authServer\\backend\\bin\\www"],"memoryUsage":{"rss":52543488,"heapTotal":41086976,"heapUsed":23897896,"external":129331}},"os":{"loadavg":[0,0,0],"uptime":122717},"trace":[{"column":14,"file":"C:\\DEV\\authServer\\backend\\models\\index.js","function":null,"line":38,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":11,"file":"C:\\DEV\\authServer\\backend\\node_modules\\app-root-path\\lib\\app-root-path.js","function":"require","line":14,"method":null,"native":false},{"column":16,"file":"C:\\DEV\\authServer\\backend\\routes\\users\\index.js","function":null,"line":6,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false},{"column":3,"file":"internal/modules/cjs/loader.js","function":"Module._load","line":552,"method":"_load","native":false},{"column":17,"file":"internal/modules/cjs/loader.js","function":"Module.require","line":657,"method":"require","native":false},{"column":18,"file":"internal/modules/cjs/helpers.js","function":"require","line":22,"method":null,"native":false},{"column":21,"file":"C:\\DEV\\authServer\\backend\\app.js","function":null,"line":13,"method":null,"native":false},{"column":30,"file":"internal/modules/cjs/loader.js","function":"Module._compile","line":721,"method":"_compile","native":false},{"column":10,"file":"internal/modules/cjs/loader.js","function":"Module._extensions..js","line":732,"method":".js","native":false},{"column":32,"file":"internal/modules/cjs/loader.js","function":"Module.load","line":620,"method":"load","native":false},{"column":12,"file":"internal/modules/cjs/loader.js","function":"tryModuleLoad","line":560,"method":null,"native":false}]}
{"message":"::1 - - [06/Feb/2019:12:37:47 +0000] \"GET /users HTTP/1.1\" 200 2 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n","level":"info"}
{"message":"::1 - - [09/Feb/2019:05:31:13 +0000] \"GET /users HTTP/1.1\" 304 - \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n","level":"info"}
{"message":"404 - Not Found - /favicon.ico - GET - ::1","level":"error"}
{"message":"::1 - - [09/Feb/2019:05:31:14 +0000] \"GET /favicon.ico HTTP/1.1\" 404 1992 \"http://localhost:3000/users\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n","level":"info"}
